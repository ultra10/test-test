/**
 * elasticemail_Restful_api
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0b
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ElasticemailRestfulApi) {
      root.ElasticemailRestfulApi = {};
    }
    root.ElasticemailRestfulApi.SubAccount = factory(root.ElasticemailRestfulApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The SubAccount model module.
   * @module model/SubAccount
   * @version 3.0.0b
   */

  /**
   * Constructs a new <code>SubAccount</code>.
   * Subaccount. Contains detailed data of your Subaccount.
   * @alias module:model/SubAccount
   * @class
   * @param publicAccountID {String} Public key for limited access to your account such as contact/add so you can use it safely on public websites.
   * @param apiKey {String} ApiKey that gives you access to our SMTP and HTTP API's.
   * @param email {String} Proper email address.
   * @param poolName {String} Name of your custom IP Pool to be used in the sending process
   * @param lastActivity {String} Date of last activity on account
   * @param emailCredits {String} Amount of email credits
   * @param requiresEmailCredits {Boolean} True, if account needs credits to send emails. Otherwise, false
   * @param monthlyRefillCredits {Number} Amount of credits added to account automatically
   * @param enablePrivateIPRequest {Boolean} True, if account can request for private IP on its own. Otherwise, false
   * @param totalEmailsSent {Number} Amount of emails sent from this account
   * @param unknownUsersPercent {Number} Percent of Unknown users - users that couldn't be found
   * @param abusePercent {Number} Percent of Complaining users - those, who do not want to receive email from you.
   * @param failedSpamPercent {Number} Percent of Bounced users
   * @param reputation {Number} Numeric reputation
   * @param dailySendLimit {Number} Amount of emails account can send daily
   * @param status {String} Name of account's status: Deleted, Disabled, UnderReview, NoPaymentsAllowed, NeverSignedIn, Active, SystemPaused
   * @param emailSizeLimit {Number} Maximum size of email including attachments in MB's
   * @param maxContacts {Number} Maximum number of contacts the account can have
   * @param sendingPermission {module:model/SubAccount.SendingPermissionEnum} Sending permission setting for account
   * @param hasModify2FA {Boolean} 
   * @param contactsCount {Number} 
   */
  var exports = function(publicAccountID, apiKey, email, poolName, lastActivity, emailCredits, requiresEmailCredits, monthlyRefillCredits, enablePrivateIPRequest, totalEmailsSent, unknownUsersPercent, abusePercent, failedSpamPercent, reputation, dailySendLimit, status, emailSizeLimit, maxContacts, sendingPermission, hasModify2FA, contactsCount) {
    var _this = this;

    _this['PublicAccountID'] = publicAccountID;
    _this['ApiKey'] = apiKey;
    _this['Email'] = email;
    _this['PoolName'] = poolName;
    _this['LastActivity'] = lastActivity;
    _this['EmailCredits'] = emailCredits;
    _this['RequiresEmailCredits'] = requiresEmailCredits;
    _this['MonthlyRefillCredits'] = monthlyRefillCredits;
    _this['EnablePrivateIPRequest'] = enablePrivateIPRequest;
    _this['TotalEmailsSent'] = totalEmailsSent;
    _this['UnknownUsersPercent'] = unknownUsersPercent;
    _this['AbusePercent'] = abusePercent;
    _this['FailedSpamPercent'] = failedSpamPercent;
    _this['Reputation'] = reputation;
    _this['DailySendLimit'] = dailySendLimit;
    _this['Status'] = status;
    _this['EmailSizeLimit'] = emailSizeLimit;
    _this['MaxContacts'] = maxContacts;
    _this['SendingPermission'] = sendingPermission;
    _this['HasModify2FA'] = hasModify2FA;
    _this['ContactsCount'] = contactsCount;
  };

  /**
   * Constructs a <code>SubAccount</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SubAccount} obj Optional instance to populate.
   * @return {module:model/SubAccount} The populated <code>SubAccount</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('PublicAccountID')) {
        obj['PublicAccountID'] = ApiClient.convertToType(data['PublicAccountID'], 'String');
      }
      if (data.hasOwnProperty('ApiKey')) {
        obj['ApiKey'] = ApiClient.convertToType(data['ApiKey'], 'String');
      }
      if (data.hasOwnProperty('Email')) {
        obj['Email'] = ApiClient.convertToType(data['Email'], 'String');
      }
      if (data.hasOwnProperty('PoolName')) {
        obj['PoolName'] = ApiClient.convertToType(data['PoolName'], 'String');
      }
      if (data.hasOwnProperty('LastActivity')) {
        obj['LastActivity'] = ApiClient.convertToType(data['LastActivity'], 'String');
      }
      if (data.hasOwnProperty('EmailCredits')) {
        obj['EmailCredits'] = ApiClient.convertToType(data['EmailCredits'], 'String');
      }
      if (data.hasOwnProperty('RequiresEmailCredits')) {
        obj['RequiresEmailCredits'] = ApiClient.convertToType(data['RequiresEmailCredits'], 'Boolean');
      }
      if (data.hasOwnProperty('MonthlyRefillCredits')) {
        obj['MonthlyRefillCredits'] = ApiClient.convertToType(data['MonthlyRefillCredits'], 'Number');
      }
      if (data.hasOwnProperty('EnablePrivateIPRequest')) {
        obj['EnablePrivateIPRequest'] = ApiClient.convertToType(data['EnablePrivateIPRequest'], 'Boolean');
      }
      if (data.hasOwnProperty('TotalEmailsSent')) {
        obj['TotalEmailsSent'] = ApiClient.convertToType(data['TotalEmailsSent'], 'Number');
      }
      if (data.hasOwnProperty('UnknownUsersPercent')) {
        obj['UnknownUsersPercent'] = ApiClient.convertToType(data['UnknownUsersPercent'], 'Number');
      }
      if (data.hasOwnProperty('AbusePercent')) {
        obj['AbusePercent'] = ApiClient.convertToType(data['AbusePercent'], 'Number');
      }
      if (data.hasOwnProperty('FailedSpamPercent')) {
        obj['FailedSpamPercent'] = ApiClient.convertToType(data['FailedSpamPercent'], 'Number');
      }
      if (data.hasOwnProperty('Reputation')) {
        obj['Reputation'] = ApiClient.convertToType(data['Reputation'], 'Number');
      }
      if (data.hasOwnProperty('DailySendLimit')) {
        obj['DailySendLimit'] = ApiClient.convertToType(data['DailySendLimit'], 'Number');
      }
      if (data.hasOwnProperty('Status')) {
        obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
      }
      if (data.hasOwnProperty('EmailSizeLimit')) {
        obj['EmailSizeLimit'] = ApiClient.convertToType(data['EmailSizeLimit'], 'Number');
      }
      if (data.hasOwnProperty('MaxContacts')) {
        obj['MaxContacts'] = ApiClient.convertToType(data['MaxContacts'], 'Number');
      }
      if (data.hasOwnProperty('SendingPermission')) {
        obj['SendingPermission'] = ApiClient.convertToType(data['SendingPermission'], 'String');
      }
      if (data.hasOwnProperty('HasModify2FA')) {
        obj['HasModify2FA'] = ApiClient.convertToType(data['HasModify2FA'], 'Boolean');
      }
      if (data.hasOwnProperty('ContactsCount')) {
        obj['ContactsCount'] = ApiClient.convertToType(data['ContactsCount'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Public key for limited access to your account such as contact/add so you can use it safely on public websites.
   * @member {String} PublicAccountID
   */
  exports.prototype['PublicAccountID'] = undefined;
  /**
   * ApiKey that gives you access to our SMTP and HTTP API's.
   * @member {String} ApiKey
   */
  exports.prototype['ApiKey'] = undefined;
  /**
   * Proper email address.
   * @member {String} Email
   */
  exports.prototype['Email'] = undefined;
  /**
   * Name of your custom IP Pool to be used in the sending process
   * @member {String} PoolName
   */
  exports.prototype['PoolName'] = undefined;
  /**
   * Date of last activity on account
   * @member {String} LastActivity
   */
  exports.prototype['LastActivity'] = undefined;
  /**
   * Amount of email credits
   * @member {String} EmailCredits
   */
  exports.prototype['EmailCredits'] = undefined;
  /**
   * True, if account needs credits to send emails. Otherwise, false
   * @member {Boolean} RequiresEmailCredits
   */
  exports.prototype['RequiresEmailCredits'] = undefined;
  /**
   * Amount of credits added to account automatically
   * @member {Number} MonthlyRefillCredits
   */
  exports.prototype['MonthlyRefillCredits'] = undefined;
  /**
   * True, if account can request for private IP on its own. Otherwise, false
   * @member {Boolean} EnablePrivateIPRequest
   */
  exports.prototype['EnablePrivateIPRequest'] = undefined;
  /**
   * Amount of emails sent from this account
   * @member {Number} TotalEmailsSent
   */
  exports.prototype['TotalEmailsSent'] = undefined;
  /**
   * Percent of Unknown users - users that couldn't be found
   * @member {Number} UnknownUsersPercent
   */
  exports.prototype['UnknownUsersPercent'] = undefined;
  /**
   * Percent of Complaining users - those, who do not want to receive email from you.
   * @member {Number} AbusePercent
   */
  exports.prototype['AbusePercent'] = undefined;
  /**
   * Percent of Bounced users
   * @member {Number} FailedSpamPercent
   */
  exports.prototype['FailedSpamPercent'] = undefined;
  /**
   * Numeric reputation
   * @member {Number} Reputation
   */
  exports.prototype['Reputation'] = undefined;
  /**
   * Amount of emails account can send daily
   * @member {Number} DailySendLimit
   */
  exports.prototype['DailySendLimit'] = undefined;
  /**
   * Name of account's status: Deleted, Disabled, UnderReview, NoPaymentsAllowed, NeverSignedIn, Active, SystemPaused
   * @member {String} Status
   */
  exports.prototype['Status'] = undefined;
  /**
   * Maximum size of email including attachments in MB's
   * @member {Number} EmailSizeLimit
   */
  exports.prototype['EmailSizeLimit'] = undefined;
  /**
   * Maximum number of contacts the account can have
   * @member {Number} MaxContacts
   */
  exports.prototype['MaxContacts'] = undefined;
  /**
   * Sending permission setting for account
   * @member {module:model/SubAccount.SendingPermissionEnum} SendingPermission
   */
  exports.prototype['SendingPermission'] = undefined;
  /**
   * @member {Boolean} HasModify2FA
   */
  exports.prototype['HasModify2FA'] = undefined;
  /**
   * @member {Number} ContactsCount
   */
  exports.prototype['ContactsCount'] = undefined;


  /**
   * Allowed values for the <code>SendingPermission</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SendingPermissionEnum = {
    /**
     * value: "None"
     * @const
     */
    "None": "None",
    /**
     * value: "Smtp"
     * @const
     */
    "Smtp": "Smtp",
    /**
     * value: "HttpApi"
     * @const
     */
    "HttpApi": "HttpApi",
    /**
     * value: "SmtpAndHttpApi"
     * @const
     */
    "SmtpAndHttpApi": "SmtpAndHttpApi",
    /**
     * value: "Interface"
     * @const
     */
    "Interface": "Interface",
    /**
     * value: "SmtpAndInterface"
     * @const
     */
    "SmtpAndInterface": "SmtpAndInterface",
    /**
     * value: "HttpApiAndInterface"
     * @const
     */
    "HttpApiAndInterface": "HttpApiAndInterface",
    /**
     * value: "UseAccessLevel"
     * @const
     */
    "UseAccessLevel": "UseAccessLevel",
    /**
     * value: "All"
     * @const
     */
    "All": "All"  };


  return exports;
}));


