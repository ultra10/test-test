/**
 * elasticemail_Restful_api
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0b
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ElasticemailRestfulApi) {
      root.ElasticemailRestfulApi = {};
    }
    root.ElasticemailRestfulApi.SubAccountSettings = factory(root.ElasticemailRestfulApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The SubAccountSettings model module.
   * @module model/SubAccountSettings
   * @version 3.0.0b
   */

  /**
   * Constructs a new <code>SubAccountSettings</code>.
   * Detailed account settings.
   * @alias module:model/SubAccountSettings
   * @class
   * @param email {String} Proper email address.
   * @param requiresEmailCredits {Boolean} True, if account needs credits to send emails. Otherwise, false
   * @param monthlyRefillCredits {Number} Amount of credits added to account automatically
   * @param emailSizeLimit {Number} Maximum size of email including attachments in MB's
   * @param dailySendLimit {Number} Amount of emails account can send daily
   * @param maxContacts {Number} Maximum number of contacts the account can have
   * @param enablePrivateIPRequest {Boolean} True, if account can request for private IP on its own. Otherwise, false
   * @param enableContactFeatures {Boolean} True, if you want to use Contact Delivery Tools.  Otherwise, false
   * @param sendingPermission {module:model/SubAccountSettings.SendingPermissionEnum} Sending permission setting for account
   * @param poolName {String} Name of your custom IP Pool to be used in the sending process
   * @param publicAccountID {String} Public key for limited access to your account such as contact/add so you can use it safely on public websites.
   */
  var exports = function(email, requiresEmailCredits, monthlyRefillCredits, emailSizeLimit, dailySendLimit, maxContacts, enablePrivateIPRequest, enableContactFeatures, sendingPermission, poolName, publicAccountID) {
    var _this = this;

    _this['Email'] = email;
    _this['RequiresEmailCredits'] = requiresEmailCredits;
    _this['MonthlyRefillCredits'] = monthlyRefillCredits;
    _this['EmailSizeLimit'] = emailSizeLimit;
    _this['DailySendLimit'] = dailySendLimit;
    _this['MaxContacts'] = maxContacts;
    _this['EnablePrivateIPRequest'] = enablePrivateIPRequest;
    _this['EnableContactFeatures'] = enableContactFeatures;
    _this['SendingPermission'] = sendingPermission;
    _this['PoolName'] = poolName;
    _this['PublicAccountID'] = publicAccountID;

  };

  /**
   * Constructs a <code>SubAccountSettings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SubAccountSettings} obj Optional instance to populate.
   * @return {module:model/SubAccountSettings} The populated <code>SubAccountSettings</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('Email')) {
        obj['Email'] = ApiClient.convertToType(data['Email'], 'String');
      }
      if (data.hasOwnProperty('RequiresEmailCredits')) {
        obj['RequiresEmailCredits'] = ApiClient.convertToType(data['RequiresEmailCredits'], 'Boolean');
      }
      if (data.hasOwnProperty('MonthlyRefillCredits')) {
        obj['MonthlyRefillCredits'] = ApiClient.convertToType(data['MonthlyRefillCredits'], 'Number');
      }
      if (data.hasOwnProperty('EmailSizeLimit')) {
        obj['EmailSizeLimit'] = ApiClient.convertToType(data['EmailSizeLimit'], 'Number');
      }
      if (data.hasOwnProperty('DailySendLimit')) {
        obj['DailySendLimit'] = ApiClient.convertToType(data['DailySendLimit'], 'Number');
      }
      if (data.hasOwnProperty('MaxContacts')) {
        obj['MaxContacts'] = ApiClient.convertToType(data['MaxContacts'], 'Number');
      }
      if (data.hasOwnProperty('EnablePrivateIPRequest')) {
        obj['EnablePrivateIPRequest'] = ApiClient.convertToType(data['EnablePrivateIPRequest'], 'Boolean');
      }
      if (data.hasOwnProperty('EnableContactFeatures')) {
        obj['EnableContactFeatures'] = ApiClient.convertToType(data['EnableContactFeatures'], 'Boolean');
      }
      if (data.hasOwnProperty('SendingPermission')) {
        obj['SendingPermission'] = ApiClient.convertToType(data['SendingPermission'], 'String');
      }
      if (data.hasOwnProperty('PoolName')) {
        obj['PoolName'] = ApiClient.convertToType(data['PoolName'], 'String');
      }
      if (data.hasOwnProperty('PublicAccountID')) {
        obj['PublicAccountID'] = ApiClient.convertToType(data['PublicAccountID'], 'String');
      }
      if (data.hasOwnProperty('Allow2FA')) {
        obj['Allow2FA'] = ApiClient.convertToType(data['Allow2FA'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * Proper email address.
   * @member {String} Email
   */
  exports.prototype['Email'] = undefined;
  /**
   * True, if account needs credits to send emails. Otherwise, false
   * @member {Boolean} RequiresEmailCredits
   */
  exports.prototype['RequiresEmailCredits'] = undefined;
  /**
   * Amount of credits added to account automatically
   * @member {Number} MonthlyRefillCredits
   */
  exports.prototype['MonthlyRefillCredits'] = undefined;
  /**
   * Maximum size of email including attachments in MB's
   * @member {Number} EmailSizeLimit
   */
  exports.prototype['EmailSizeLimit'] = undefined;
  /**
   * Amount of emails account can send daily
   * @member {Number} DailySendLimit
   */
  exports.prototype['DailySendLimit'] = undefined;
  /**
   * Maximum number of contacts the account can have
   * @member {Number} MaxContacts
   */
  exports.prototype['MaxContacts'] = undefined;
  /**
   * True, if account can request for private IP on its own. Otherwise, false
   * @member {Boolean} EnablePrivateIPRequest
   */
  exports.prototype['EnablePrivateIPRequest'] = undefined;
  /**
   * True, if you want to use Contact Delivery Tools.  Otherwise, false
   * @member {Boolean} EnableContactFeatures
   */
  exports.prototype['EnableContactFeatures'] = undefined;
  /**
   * Sending permission setting for account
   * @member {module:model/SubAccountSettings.SendingPermissionEnum} SendingPermission
   */
  exports.prototype['SendingPermission'] = undefined;
  /**
   * Name of your custom IP Pool to be used in the sending process
   * @member {String} PoolName
   */
  exports.prototype['PoolName'] = undefined;
  /**
   * Public key for limited access to your account such as contact/add so you can use it safely on public websites.
   * @member {String} PublicAccountID
   */
  exports.prototype['PublicAccountID'] = undefined;
  /**
   * @member {Boolean} Allow2FA
   */
  exports.prototype['Allow2FA'] = undefined;


  /**
   * Allowed values for the <code>SendingPermission</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SendingPermissionEnum = {
    /**
     * value: "None"
     * @const
     */
    "None": "None",
    /**
     * value: "Smtp"
     * @const
     */
    "Smtp": "Smtp",
    /**
     * value: "HttpApi"
     * @const
     */
    "HttpApi": "HttpApi",
    /**
     * value: "SmtpAndHttpApi"
     * @const
     */
    "SmtpAndHttpApi": "SmtpAndHttpApi",
    /**
     * value: "Interface"
     * @const
     */
    "Interface": "Interface",
    /**
     * value: "SmtpAndInterface"
     * @const
     */
    "SmtpAndInterface": "SmtpAndInterface",
    /**
     * value: "HttpApiAndInterface"
     * @const
     */
    "HttpApiAndInterface": "HttpApiAndInterface",
    /**
     * value: "UseAccessLevel"
     * @const
     */
    "UseAccessLevel": "UseAccessLevel",
    /**
     * value: "All"
     * @const
     */
    "All": "All"  };


  return exports;
}));


