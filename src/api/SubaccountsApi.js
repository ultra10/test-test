/**
 * elasticemail_Restful_api
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0b
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Account', 'model/SubAccount', 'model/SubAccountSettings', 'model/SubaccountCreditsPayload', 'model/SubaccountPayload'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Account'), require('../model/SubAccount'), require('../model/SubAccountSettings'), require('../model/SubaccountCreditsPayload'), require('../model/SubaccountPayload'));
  } else {
    // Browser globals (root is window)
    if (!root.ElasticemailRestfulApi) {
      root.ElasticemailRestfulApi = {};
    }
    root.ElasticemailRestfulApi.SubaccountsApi = factory(root.ElasticemailRestfulApi.ApiClient, root.ElasticemailRestfulApi.Account, root.ElasticemailRestfulApi.SubAccount, root.ElasticemailRestfulApi.SubAccountSettings, root.ElasticemailRestfulApi.SubaccountCreditsPayload, root.ElasticemailRestfulApi.SubaccountPayload);
  }
}(this, function(ApiClient, Account, SubAccount, SubAccountSettings, SubaccountCreditsPayload, SubaccountPayload) {
  'use strict';

  /**
   * Subaccounts service.
   * @module api/SubaccountsApi
   * @version 3.0.0b
   */

  /**
   * Constructs a new SubaccountsApi. 
   * @alias module:api/SubaccountsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the subaccountsEmailCreditsDelete operation.
     * @callback module:api/SubaccountsApi~subaccountsEmailCreditsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove email, template or litmus credits from a sub-account
     * @param {String} notes Specific notes about the transaction
     * @param {String} email Email address of sub-account
     * @param {Object} opts Optional parameters
     * @param {Number} opts.credits Amount of credits to remove
     * @param {Boolean} opts.removeAll Remove all credits of this type from sub-account (overrides credits if provided) (default to False)
     * @param {module:api/SubaccountsApi~subaccountsEmailCreditsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.subaccountsEmailCreditsDelete = function(notes, email, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'notes' is set
      if (notes === undefined || notes === null) {
        throw new Error("Missing the required parameter 'notes' when calling subaccountsEmailCreditsDelete");
      }

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling subaccountsEmailCreditsDelete");
      }


      var pathParams = {
        'email': email
      };
      var queryParams = {
        'notes': notes,
        'credits': opts['credits'],
        'removeAll': opts['removeAll'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/subaccounts/{email}/credits', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subaccountsEmailCreditsPost operation.
     * @callback module:api/SubaccountsApi~subaccountsEmailCreditsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add email credits to a sub-account
     * @param {module:model/SubaccountCreditsPayload} body Amount of credits to add
     * @param {String} email Email address of sub-account
     * @param {module:api/SubaccountsApi~subaccountsEmailCreditsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.subaccountsEmailCreditsPost = function(body, email, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling subaccountsEmailCreditsPost");
      }

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling subaccountsEmailCreditsPost");
      }


      var pathParams = {
        'email': email
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/subaccounts/{email}/credits', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subaccountsEmailDelete operation.
     * @callback module:api/SubaccountsApi~subaccountsEmailDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes specified Subaccount
     * @param {String} email Email address of sub-account
     * @param {module:api/SubaccountsApi~subaccountsEmailDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.subaccountsEmailDelete = function(email, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling subaccountsEmailDelete");
      }


      var pathParams = {
        'email': email
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/subaccounts/{email}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subaccountsEmailGet operation.
     * @callback module:api/SubaccountsApi~subaccountsEmailGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve info about one of your subaccounts
     * @param {String} email Email address of sub-account
     * @param {module:api/SubaccountsApi~subaccountsEmailGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubAccount}
     */
    this.subaccountsEmailGet = function(email, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling subaccountsEmailGet");
      }


      var pathParams = {
        'email': email
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SubAccount;

      return this.apiClient.callApi(
        '/subaccounts/{email}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subaccountsEmailSettingsGet operation.
     * @callback module:api/SubaccountsApi~subaccountsEmailSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubAccountSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads settings of subaccount
     * @param {String} email Email address of sub-account
     * @param {module:api/SubaccountsApi~subaccountsEmailSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubAccountSettings}
     */
    this.subaccountsEmailSettingsGet = function(email, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling subaccountsEmailSettingsGet");
      }


      var pathParams = {
        'email': email
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SubAccountSettings;

      return this.apiClient.callApi(
        '/subaccounts/{email}/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subaccountsEmailSettingsPut operation.
     * @callback module:api/SubaccountsApi~subaccountsEmailSettingsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubAccountSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates settings of specified subaccount
     * @param {String} email Email address of sub-account
     * @param {module:model/SubAccountSettings} body Http notification settings serialized to JSON 
     * @param {module:api/SubaccountsApi~subaccountsEmailSettingsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubAccountSettings}
     */
    this.subaccountsEmailSettingsPut = function(email, body, callback) {
      var postBody = body;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling subaccountsEmailSettingsPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling subaccountsEmailSettingsPut");
      }


      var pathParams = {
        'email': email
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SubAccountSettings;

      return this.apiClient.callApi(
        '/subaccounts/{email}/settings', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subaccountsGet operation.
     * @callback module:api/SubaccountsApi~subaccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubAccount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of your subaccounts
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum of loaded items. (default to 0)
     * @param {Number} opts.offset How many items should be loaded ahead. (default to 0)
     * @param {module:api/SubaccountsApi~subaccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubAccount>}
     */
    this.subaccountsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SubAccount];

      return this.apiClient.callApi(
        '/subaccounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subaccountsPost operation.
     * @callback module:api/SubaccountsApi~subaccountsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new subaccount and provide most important data about it.
     * @param {module:model/SubaccountPayload} body 
     * @param {module:api/SubaccountsApi~subaccountsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    this.subaccountsPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling subaccountsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Account;

      return this.apiClient.callApi(
        '/subaccounts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
