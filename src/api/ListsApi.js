/**
 * elasticemail_Restful_api
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0b
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CampaignListPayload', 'model/EmailsPayload', 'model/ListPayload', 'model/ListUpdatePayload', 'model/MoveToListPayload', 'model/RandomListPayload'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CampaignListPayload'), require('../model/EmailsPayload'), require('../model/ListPayload'), require('../model/ListUpdatePayload'), require('../model/MoveToListPayload'), require('../model/RandomListPayload'));
  } else {
    // Browser globals (root is window)
    if (!root.ElasticemailRestfulApi) {
      root.ElasticemailRestfulApi = {};
    }
    root.ElasticemailRestfulApi.ListsApi = factory(root.ElasticemailRestfulApi.ApiClient, root.ElasticemailRestfulApi.CampaignListPayload, root.ElasticemailRestfulApi.EmailsPayload, root.ElasticemailRestfulApi.ListPayload, root.ElasticemailRestfulApi.ListUpdatePayload, root.ElasticemailRestfulApi.MoveToListPayload, root.ElasticemailRestfulApi.RandomListPayload);
  }
}(this, function(ApiClient, CampaignListPayload, EmailsPayload, ListPayload, ListUpdatePayload, MoveToListPayload, RandomListPayload) {
  'use strict';

  /**
   * Lists service.
   * @module api/ListsApi
   * @version 3.0.0b
   */

  /**
   * Constructs a new ListsApi. 
   * @alias module:api/ListsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the listsFromcampaignPost operation.
     * @callback module:api/ListsApi~listsFromcampaignPostCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new list from the recipients of the given campaign, using the given statuses of Messages
     * @param {module:model/CampaignListPayload} body Data of the campaign which recipients you want to copy
     * @param {module:api/ListsApi~listsFromcampaignPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    this.listsFromcampaignPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listsFromcampaignPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Array;

      return this.apiClient.callApi(
        '/lists/fromcampaign', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listsGet operation.
     * @callback module:api/ListsApi~listsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Array>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows all your existing lists
     * @param {Object} opts Optional parameters
     * @param {String} opts.from Starting date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {String} opts.to Ending date for search in YYYY-MM-DDThh:mm:ss format.
     * @param {module:api/ListsApi~listsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Array>}
     */
    this.listsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Array];

      return this.apiClient.callApi(
        '/lists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listsListnameContactsDelete operation.
     * @callback module:api/ListsApi~listsListnameContactsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove selected Contacts from your list
     * @param {String} listname Name of your list.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.emails Comma delimited list of contact emails
     * @param {String} opts.rule Query used for filtering.
     * @param {module:api/ListsApi~listsListnameContactsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.listsListnameContactsDelete = function(listname, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling listsListnameContactsDelete");
      }


      var pathParams = {
        'listname': listname
      };
      var queryParams = {
        'rule': opts['rule'],
      };
      var collectionQueryParams = {
        'emails': {
          value: opts['emails'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/lists/{listname}/contacts', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listsListnameContactsMovePut operation.
     * @callback module:api/ListsApi~listsListnameContactsMovePutCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move selected contacts from one List to another
     * @param {String} listname The name of the list from which the contacts will be copied from
     * @param {module:model/MoveToListPayload} body The data of the list to copy the contacts to
     * @param {module:api/ListsApi~listsListnameContactsMovePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    this.listsListnameContactsMovePut = function(listname, body, callback) {
      var postBody = body;

      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling listsListnameContactsMovePut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listsListnameContactsMovePut");
      }


      var pathParams = {
        'listname': listname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Array;

      return this.apiClient.callApi(
        '/lists/{listname}/contacts/move', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listsListnameContactsPut operation.
     * @callback module:api/ListsApi~listsListnameContactsPutCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add existing Contacts to chosen list
     * @param {String} listname Name of your list.
     * @param {module:model/EmailsPayload} body Comma delimited list of contact emails
     * @param {module:api/ListsApi~listsListnameContactsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    this.listsListnameContactsPut = function(listname, body, callback) {
      var postBody = body;

      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling listsListnameContactsPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listsListnameContactsPut");
      }


      var pathParams = {
        'listname': listname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Array;

      return this.apiClient.callApi(
        '/lists/{listname}/contacts', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listsListnameDelete operation.
     * @callback module:api/ListsApi~listsListnameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes List and removes all the Contacts from it (does not delete Contacts).
     * @param {String} listname Name of your list.
     * @param {module:api/ListsApi~listsListnameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.listsListnameDelete = function(listname, callback) {
      var postBody = null;

      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling listsListnameDelete");
      }


      var pathParams = {
        'listname': listname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/lists/{listname}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listsListnameGet operation.
     * @callback module:api/ListsApi~listsListnameGetCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns detailed information about specific list.
     * @param {String} listname Name of your list.
     * @param {module:api/ListsApi~listsListnameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    this.listsListnameGet = function(listname, callback) {
      var postBody = null;

      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling listsListnameGet");
      }


      var pathParams = {
        'listname': listname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Array;

      return this.apiClient.callApi(
        '/lists/{listname}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listsListnamePut operation.
     * @callback module:api/ListsApi~listsListnamePutCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing list
     * @param {String} listname Name of your list.
     * @param {module:model/ListUpdatePayload} body 
     * @param {module:api/ListsApi~listsListnamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    this.listsListnamePut = function(listname, body, callback) {
      var postBody = body;

      // verify the required parameter 'listname' is set
      if (listname === undefined || listname === null) {
        throw new Error("Missing the required parameter 'listname' when calling listsListnamePut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listsListnamePut");
      }


      var pathParams = {
        'listname': listname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Array;

      return this.apiClient.callApi(
        '/lists/{listname}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listsPost operation.
     * @callback module:api/ListsApi~listsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new list, based on filtering rule or list of IDs
     * @param {module:model/ListPayload} body 
     * @param {module:api/ListsApi~listsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    this.listsPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Array;

      return this.apiClient.callApi(
        '/lists', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listsRandomPost operation.
     * @callback module:api/ListsApi~listsRandomPostCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new list with randomized contacts from an existing list or segment
     * @param {module:model/RandomListPayload} body 
     * @param {module:api/ListsApi~listsRandomPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    this.listsRandomPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listsRandomPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Array;

      return this.apiClient.callApi(
        '/lists/random', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
