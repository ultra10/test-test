/**
 * elasticemail_Restful_api
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0b
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Email', 'model/EmailJobStatus', 'model/EmailMergeMessage', 'model/EmailSend', 'model/EmailTransactionalMessage'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Email'), require('../model/EmailJobStatus'), require('../model/EmailMergeMessage'), require('../model/EmailSend'), require('../model/EmailTransactionalMessage'));
  } else {
    // Browser globals (root is window)
    if (!root.ElasticemailRestfulApi) {
      root.ElasticemailRestfulApi = {};
    }
    root.ElasticemailRestfulApi.EmailsApi = factory(root.ElasticemailRestfulApi.ApiClient, root.ElasticemailRestfulApi.Email, root.ElasticemailRestfulApi.EmailJobStatus, root.ElasticemailRestfulApi.EmailMergeMessage, root.ElasticemailRestfulApi.EmailSend, root.ElasticemailRestfulApi.EmailTransactionalMessage);
  }
}(this, function(ApiClient, Email, EmailJobStatus, EmailMergeMessage, EmailSend, EmailTransactionalMessage) {
  'use strict';

  /**
   * Emails service.
   * @module api/EmailsApi
   * @version 3.0.0b
   */

  /**
   * Constructs a new EmailsApi. 
   * @alias module:api/EmailsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the emailsMergePost operation.
     * @callback module:api/EmailsApi~emailsMergePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmailSend} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send bulk merge email
     * @param {module:model/EmailMergeMessage} body Content of message, HTML encoded
     * @param {module:api/EmailsApi~emailsMergePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmailSend}
     */
    this.emailsMergePost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling emailsMergePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSend;

      return this.apiClient.callApi(
        '/emails/merge', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the emailsMsgidViewGet operation.
     * @callback module:api/EmailsApi~emailsMsgidViewGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Email} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View email
     * @param {String} msgid Message identifier
     * @param {module:api/EmailsApi~emailsMsgidViewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Email}
     */
    this.emailsMsgidViewGet = function(msgid, callback) {
      var postBody = null;

      // verify the required parameter 'msgid' is set
      if (msgid === undefined || msgid === null) {
        throw new Error("Missing the required parameter 'msgid' when calling emailsMsgidViewGet");
      }


      var pathParams = {
        'msgid': msgid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Email;

      return this.apiClient.callApi(
        '/emails/{msgid}/view', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the emailsTransactionalPost operation.
     * @callback module:api/EmailsApi~emailsTransactionalPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmailSend} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send transactional message (recipients will be known to each other)
     * @param {module:model/EmailTransactionalMessage} body Content of message, HTML encoded
     * @param {module:api/EmailsApi~emailsTransactionalPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmailSend}
     */
    this.emailsTransactionalPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling emailsTransactionalPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSend;

      return this.apiClient.callApi(
        '/emails/transactional', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the emailsTransactionidCancelPost operation.
     * @callback module:api/EmailsApi~emailsTransactionidCancelPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels emails that are waiting to be sent.
     * @param {String} transactionid ID number of transaction
     * @param {module:api/EmailsApi~emailsTransactionidCancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.emailsTransactionidCancelPost = function(transactionid, callback) {
      var postBody = null;

      // verify the required parameter 'transactionid' is set
      if (transactionid === undefined || transactionid === null) {
        throw new Error("Missing the required parameter 'transactionid' when calling emailsTransactionidCancelPost");
      }


      var pathParams = {
        'transactionid': transactionid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/emails/{transactionid}/cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the emailsTransactionidStatusGet operation.
     * @callback module:api/EmailsApi~emailsTransactionidStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmailJobStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email batch status
     * @param {String} transactionid Transaction identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showFailed Include Bounced email addresses. (default to False)
     * @param {Boolean} opts.showSent Include Sent email addresses. (default to False)
     * @param {Boolean} opts.showDelivered Include all delivered email addresses. (default to False)
     * @param {Boolean} opts.showPending Include Ready to send email addresses. (default to False)
     * @param {Boolean} opts.showOpened Include Opened email addresses. (default to False)
     * @param {Boolean} opts.showClicked Include Clicked email addresses. (default to False)
     * @param {Boolean} opts.showAbuse Include Reported as abuse email addresses. (default to False)
     * @param {Boolean} opts.showUnsubscribed Include Unsubscribed email addresses. (default to False)
     * @param {Boolean} opts.showErrors Include error messages for bounced emails. (default to False)
     * @param {Boolean} opts.showMessageIDs Include all MessageIDs for this transaction (default to False)
     * @param {module:api/EmailsApi~emailsTransactionidStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmailJobStatus}
     */
    this.emailsTransactionidStatusGet = function(transactionid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'transactionid' is set
      if (transactionid === undefined || transactionid === null) {
        throw new Error("Missing the required parameter 'transactionid' when calling emailsTransactionidStatusGet");
      }


      var pathParams = {
        'transactionid': transactionid
      };
      var queryParams = {
        'showFailed': opts['showFailed'],
        'showSent': opts['showSent'],
        'showDelivered': opts['showDelivered'],
        'showPending': opts['showPending'],
        'showOpened': opts['showOpened'],
        'showClicked': opts['showClicked'],
        'showAbuse': opts['showAbuse'],
        'showUnsubscribed': opts['showUnsubscribed'],
        'showErrors': opts['showErrors'],
        'showMessageIDs': opts['showMessageIDs'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailJobStatus;

      return this.apiClient.callApi(
        '/emails/{transactionid}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
