/**
 * elasticemail_Restful_api
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0b
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Automated', 'model/Campaign', 'model/ExportLink', 'model/NameTypeCampaign', 'model/SplitCampaign'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Automated'), require('../model/Campaign'), require('../model/ExportLink'), require('../model/NameTypeCampaign'), require('../model/SplitCampaign'));
  } else {
    // Browser globals (root is window)
    if (!root.ElasticemailRestfulApi) {
      root.ElasticemailRestfulApi = {};
    }
    root.ElasticemailRestfulApi.CampaignsApi = factory(root.ElasticemailRestfulApi.ApiClient, root.ElasticemailRestfulApi.Automated, root.ElasticemailRestfulApi.Campaign, root.ElasticemailRestfulApi.ExportLink, root.ElasticemailRestfulApi.NameTypeCampaign, root.ElasticemailRestfulApi.SplitCampaign);
  }
}(this, function(ApiClient, Automated, Campaign, ExportLink, NameTypeCampaign, SplitCampaign) {
  'use strict';

  /**
   * Campaigns service.
   * @module api/CampaignsApi
   * @version 3.0.0b
   */

  /**
   * Constructs a new CampaignsApi. 
   * @alias module:api/CampaignsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the campaignsAbsplitGet operation.
     * @callback module:api/CampaignsApi~campaignsAbsplitGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SplitCampaign>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all of your A/X campaigns
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Text fragment used for searching.
     * @param {Number} opts.offset How many items should be loaded ahead. (default to 0)
     * @param {Number} opts.limit Maximum of loaded items. (default to 0)
     * @param {module:api/CampaignsApi~campaignsAbsplitGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SplitCampaign>}
     */
    this.campaignsAbsplitGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'offset': opts['offset'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SplitCampaign];

      return this.apiClient.callApi(
        '/campaigns/absplit', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsAbsplitNameDelete operation.
     * @callback module:api/CampaignsApi~campaignsAbsplitNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} name Filename
     * @param {module:api/CampaignsApi~campaignsAbsplitNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.campaignsAbsplitNameDelete = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling campaignsAbsplitNameDelete");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/campaigns/absplit/{name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsAbsplitNameGet operation.
     * @callback module:api/CampaignsApi~campaignsAbsplitNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SplitCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} name Filename
     * @param {module:api/CampaignsApi~campaignsAbsplitNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SplitCampaign}
     */
    this.campaignsAbsplitNameGet = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling campaignsAbsplitNameGet");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SplitCampaign;

      return this.apiClient.callApi(
        '/campaigns/absplit/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsAbsplitNamePut operation.
     * @callback module:api/CampaignsApi~campaignsAbsplitNamePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SplitCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a previously added campaign.  Only Active and Paused campaigns can be updated.
     * @param {String} name Filename
     * @param {module:model/SplitCampaign} body Json representation of a campaign
     * @param {module:api/CampaignsApi~campaignsAbsplitNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SplitCampaign}
     */
    this.campaignsAbsplitNamePut = function(name, body, callback) {
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling campaignsAbsplitNamePut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling campaignsAbsplitNamePut");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SplitCampaign;

      return this.apiClient.callApi(
        '/campaigns/absplit/{name}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsAbsplitPost operation.
     * @callback module:api/CampaignsApi~campaignsAbsplitPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SplitCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/SplitCampaign} body Json representation of a campaign
     * @param {module:api/CampaignsApi~campaignsAbsplitPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SplitCampaign}
     */
    this.campaignsAbsplitPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling campaignsAbsplitPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SplitCampaign;

      return this.apiClient.callApi(
        '/campaigns/absplit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsAllGet operation.
     * @callback module:api/CampaignsApi~campaignsAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NameTypeCampaign>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Text fragment used for searching.
     * @param {Number} opts.offset How many items should be loaded ahead. (default to 0)
     * @param {Number} opts.limit Maximum of loaded items. (default to 0)
     * @param {module:api/CampaignsApi~campaignsAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NameTypeCampaign>}
     */
    this.campaignsAllGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'offset': opts['offset'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NameTypeCampaign];

      return this.apiClient.callApi(
        '/campaigns/all', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsAutomatedGet operation.
     * @callback module:api/CampaignsApi~campaignsAutomatedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Automated>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all of your automated campaigns
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Text fragment used for searching.
     * @param {Number} opts.offset How many items should be loaded ahead. (default to 0)
     * @param {Number} opts.limit Maximum of loaded items. (default to 0)
     * @param {module:api/CampaignsApi~campaignsAutomatedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Automated>}
     */
    this.campaignsAutomatedGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'offset': opts['offset'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Automated];

      return this.apiClient.callApi(
        '/campaigns/automated', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsAutomatedNameDelete operation.
     * @callback module:api/CampaignsApi~campaignsAutomatedNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} name Filename
     * @param {module:api/CampaignsApi~campaignsAutomatedNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.campaignsAutomatedNameDelete = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling campaignsAutomatedNameDelete");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/campaigns/automated/{name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsAutomatedNameGet operation.
     * @callback module:api/CampaignsApi~campaignsAutomatedNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Automated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} name Filename
     * @param {module:api/CampaignsApi~campaignsAutomatedNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Automated}
     */
    this.campaignsAutomatedNameGet = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling campaignsAutomatedNameGet");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Automated;

      return this.apiClient.callApi(
        '/campaigns/automated/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsAutomatedNamePut operation.
     * @callback module:api/CampaignsApi~campaignsAutomatedNamePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Automated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a previously added campaign.  Only Active and Paused campaigns can be updated.
     * @param {String} name Filename
     * @param {module:model/Automated} body Json representation of a campaign
     * @param {module:api/CampaignsApi~campaignsAutomatedNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Automated}
     */
    this.campaignsAutomatedNamePut = function(name, body, callback) {
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling campaignsAutomatedNamePut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling campaignsAutomatedNamePut");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Automated;

      return this.apiClient.callApi(
        '/campaigns/automated/{name}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsAutomatedPost operation.
     * @callback module:api/CampaignsApi~campaignsAutomatedPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Automated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Automated} body Json representation of a campaign
     * @param {module:api/CampaignsApi~campaignsAutomatedPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Automated}
     */
    this.campaignsAutomatedPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling campaignsAutomatedPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Automated;

      return this.apiClient.callApi(
        '/campaigns/automated', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsNameCancelPost operation.
     * @callback module:api/CampaignsApi~campaignsNameCancelPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels emails that are waiting to be sent.
     * @param {String} name Name of selected channel.
     * @param {module:api/CampaignsApi~campaignsNameCancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.campaignsNameCancelPost = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling campaignsNameCancelPost");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/campaigns/{name}/cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsSendnowGet operation.
     * @callback module:api/CampaignsApi~campaignsSendnowGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Campaign>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all of your instant campaigns
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Text fragment used for searching.
     * @param {Number} opts.offset How many items should be loaded ahead. (default to 0)
     * @param {Number} opts.limit Maximum of loaded items. (default to 0)
     * @param {module:api/CampaignsApi~campaignsSendnowGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Campaign>}
     */
    this.campaignsSendnowGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'offset': opts['offset'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Campaign];

      return this.apiClient.callApi(
        '/campaigns/sendnow', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsSendnowNameDelete operation.
     * @callback module:api/CampaignsApi~campaignsSendnowNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} name Filename
     * @param {module:api/CampaignsApi~campaignsSendnowNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.campaignsSendnowNameDelete = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling campaignsSendnowNameDelete");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/campaigns/sendnow/{name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsSendnowNameGet operation.
     * @callback module:api/CampaignsApi~campaignsSendnowNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Campaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an existing campaign.
     * @param {String} name Filename
     * @param {module:api/CampaignsApi~campaignsSendnowNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Campaign}
     */
    this.campaignsSendnowNameGet = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling campaignsSendnowNameGet");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Campaign;

      return this.apiClient.callApi(
        '/campaigns/sendnow/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsSendnowNamePut operation.
     * @callback module:api/CampaignsApi~campaignsSendnowNamePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Campaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a previously added campaign.  Only Active and Paused campaigns can be updated.
     * @param {String} name Filename
     * @param {module:model/Campaign} body Json representation of a campaign
     * @param {module:api/CampaignsApi~campaignsSendnowNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Campaign}
     */
    this.campaignsSendnowNamePut = function(name, body, callback) {
      var postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling campaignsSendnowNamePut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling campaignsSendnowNamePut");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Campaign;

      return this.apiClient.callApi(
        '/campaigns/sendnow/{name}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsSendnowPost operation.
     * @callback module:api/CampaignsApi~campaignsSendnowPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Campaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Campaign} body Json representation of a campaign
     * @param {module:api/CampaignsApi~campaignsSendnowPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Campaign}
     */
    this.campaignsSendnowPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling campaignsSendnowPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Campaign;

      return this.apiClient.callApi(
        '/campaigns/sendnow', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsTasksExportGet operation.
     * @callback module:api/CampaignsApi~campaignsTasksExportGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export selected campaigns to chosen file format.
     * @param {Array.<String>} campaignNames List of campaign names used for processing
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.fileFormat Format of the exported file (default to Csv)
     * @param {module:model/String} opts.compressionFormat FileResponse compression format. None or Zip. (default to None)
     * @param {String} opts.fileName Name of your file.
     * @param {module:api/CampaignsApi~campaignsTasksExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportLink}
     */
    this.campaignsTasksExportGet = function(campaignNames, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'campaignNames' is set
      if (campaignNames === undefined || campaignNames === null) {
        throw new Error("Missing the required parameter 'campaignNames' when calling campaignsTasksExportGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'fileFormat': opts['fileFormat'],
        'compressionFormat': opts['compressionFormat'],
        'fileName': opts['fileName'],
      };
      var collectionQueryParams = {
        'campaignNames': {
          value: campaignNames,
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExportLink;

      return this.apiClient.callApi(
        '/campaigns/tasks/export', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
